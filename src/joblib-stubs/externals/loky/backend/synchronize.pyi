from _typeshed import Incomplete

__all__ = ['Lock', 'RLock', 'Semaphore', 'BoundedSemaphore', 'Condition', 'Event']

class SemLock:
    name: Incomplete
    def __init__(self, kind, value, maxvalue, name: Incomplete | None = None) -> None: ...
    def __enter__(self): ...
    def __exit__(self, *args): ...

class Semaphore(SemLock):
    def __init__(self, value: int = 1) -> None: ...
    def get_value(self): ...

class BoundedSemaphore(Semaphore):
    def __init__(self, value: int = 1) -> None: ...

class Lock(SemLock):
    def __init__(self) -> None: ...

class RLock(SemLock):
    def __init__(self) -> None: ...

class Condition:
    def __init__(self, lock: Incomplete | None = None) -> None: ...
    def __enter__(self): ...
    def __exit__(self, *args): ...
    def wait(self, timeout: Incomplete | None = None): ...
    def notify(self) -> None: ...
    def notify_all(self) -> None: ...
    def wait_for(self, predicate, timeout: Incomplete | None = None): ...

class Event:
    def __init__(self) -> None: ...
    def is_set(self): ...
    def set(self) -> None: ...
    def clear(self) -> None: ...
    def wait(self, timeout: Incomplete | None = None): ...
