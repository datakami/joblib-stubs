from .process import LokyInitMainProcess as LokyInitMainProcess, LokyProcess as LokyProcess
from _typeshed import Incomplete
from multiprocessing.context import BaseContext

START_METHODS: Incomplete
physical_cores_cache: Incomplete

def get_context(method: Incomplete | None = None): ...
def set_start_method(method, force: bool = False) -> None: ...
def get_start_method(): ...
def cpu_count(only_physical_cores: bool = False): ...

class LokyContext(BaseContext):
    Process = LokyProcess
    cpu_count: Incomplete
    def Queue(self, maxsize: int = 0, reducers: Incomplete | None = None): ...
    def SimpleQueue(self, reducers: Incomplete | None = None): ...
    def Semaphore(self, value: int = 1): ...
    def BoundedSemaphore(self, value): ...
    def Lock(self): ...
    def RLock(self): ...
    def Condition(self, lock: Incomplete | None = None): ...
    def Event(self): ...

class LokyInitMainContext(LokyContext):
    Process = LokyInitMainProcess

ctx_loky: Incomplete
