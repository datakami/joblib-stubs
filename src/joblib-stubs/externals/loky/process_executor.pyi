import threading
from ._base import Future as Future
from .backend import get_context as get_context
from .backend.context import cpu_count as cpu_count
from .backend.queues import Queue as Queue, SimpleQueue as SimpleQueue
from .backend.reduction import get_loky_pickler_name as get_loky_pickler_name, set_loky_pickler as set_loky_pickler
from .backend.utils import get_exitcodes_terminated_worker as get_exitcodes_terminated_worker, kill_process_tree as kill_process_tree
from _typeshed import Incomplete
from concurrent.futures import Executor
from concurrent.futures.process import BrokenProcessPool as _BPPException

MAX_DEPTH: Incomplete

class _ThreadWakeup:
    def __init__(self) -> None: ...
    def close(self) -> None: ...
    def wakeup(self) -> None: ...
    def clear(self) -> None: ...

class _ExecutorFlags:
    shutdown: bool
    broken: Incomplete
    kill_workers: bool
    shutdown_lock: Incomplete
    def __init__(self, shutdown_lock) -> None: ...
    def flag_as_shutting_down(self, kill_workers: Incomplete | None = None) -> None: ...
    def flag_as_broken(self, broken) -> None: ...

process_pool_executor_at_exit: Incomplete
EXTRA_QUEUED_CALLS: int

class _RemoteTraceback(Exception):
    tb: Incomplete
    def __init__(self, tb: Incomplete | None = None) -> None: ...

class _ExceptionWithTraceback:
    exc: Incomplete
    tb: Incomplete
    def __init__(self, exc) -> None: ...
    def __reduce__(self): ...

class _WorkItem:
    future: Incomplete
    fn: Incomplete
    args: Incomplete
    kwargs: Incomplete
    def __init__(self, future, fn, args, kwargs) -> None: ...

class _ResultItem:
    work_id: Incomplete
    exception: Incomplete
    result: Incomplete
    def __init__(self, work_id, exception: Incomplete | None = None, result: Incomplete | None = None) -> None: ...

class _CallItem:
    work_id: Incomplete
    fn: Incomplete
    args: Incomplete
    kwargs: Incomplete
    loky_pickler: Incomplete
    def __init__(self, work_id, fn, args, kwargs) -> None: ...
    def __call__(self): ...

class _SafeQueue(Queue):
    thread_wakeup: Incomplete
    pending_work_items: Incomplete
    running_work_items: Incomplete
    def __init__(self, max_size: int = 0, ctx: Incomplete | None = None, pending_work_items: Incomplete | None = None, running_work_items: Incomplete | None = None, thread_wakeup: Incomplete | None = None, reducers: Incomplete | None = None) -> None: ...

class _ExecutorManagerThread(threading.Thread):
    thread_wakeup: Incomplete
    shutdown_lock: Incomplete
    executor_reference: Incomplete
    executor_flags: Incomplete
    processes: Incomplete
    call_queue: Incomplete
    result_queue: Incomplete
    work_ids_queue: Incomplete
    pending_work_items: Incomplete
    running_work_items: Incomplete
    processes_management_lock: Incomplete
    daemon: bool
    def __init__(self, executor) -> None: ...
    def run(self) -> None: ...
    def add_call_item_to_queue(self) -> None: ...
    def wait_result_broken_or_wakeup(self): ...
    def process_result_item(self, result_item) -> None: ...
    def is_shutting_down(self): ...
    def terminate_broken(self, bpe) -> None: ...
    def flag_executor_shutting_down(self) -> None: ...
    def kill_workers(self, reason: str = '') -> None: ...
    def shutdown_workers(self) -> None: ...
    def join_executor_internals(self) -> None: ...
    def get_n_children_alive(self): ...

class LokyRecursionError(RuntimeError): ...
class BrokenProcessPool(_BPPException): ...
class TerminatedWorkerError(BrokenProcessPool): ...
BrokenExecutor = BrokenProcessPool

class ShutdownExecutorError(RuntimeError): ...

class ProcessPoolExecutor(Executor):
    def __init__(self, max_workers: Incomplete | None = None, job_reducers: Incomplete | None = None, result_reducers: Incomplete | None = None, timeout: Incomplete | None = None, context: Incomplete | None = None, initializer: Incomplete | None = None, initargs=(), env: Incomplete | None = None) -> None: ...
    def submit(self, fn, *args, **kwargs): ...
    def map(self, fn, *iterables, **kwargs): ...
    def shutdown(self, wait: bool = True, kill_workers: bool = False) -> None: ...
