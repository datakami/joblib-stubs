from .process_executor import ProcessPoolExecutor
from _typeshed import Incomplete

__all__ = ['get_reusable_executor']

def get_reusable_executor(max_workers: Incomplete | None = None, context: Incomplete | None = None, timeout: int = 10, kill_workers: bool = False, reuse: str = 'auto', job_reducers: Incomplete | None = None, result_reducers: Incomplete | None = None, initializer: Incomplete | None = None, initargs=(), env: Incomplete | None = None): ...

class _ReusablePoolExecutor(ProcessPoolExecutor):
    executor_id: Incomplete
    def __init__(self, submit_resize_lock, max_workers: Incomplete | None = None, context: Incomplete | None = None, timeout: Incomplete | None = None, executor_id: int = 0, job_reducers: Incomplete | None = None, result_reducers: Incomplete | None = None, initializer: Incomplete | None = None, initargs=(), env: Incomplete | None = None) -> None: ...
    @classmethod
    def get_reusable_executor(cls, max_workers: Incomplete | None = None, context: Incomplete | None = None, timeout: int = 10, kill_workers: bool = False, reuse: str = 'auto', job_reducers: Incomplete | None = None, result_reducers: Incomplete | None = None, initializer: Incomplete | None = None, initargs=(), env: Incomplete | None = None): ...
    def submit(self, fn, *args, **kwargs): ...
